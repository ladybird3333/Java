package com.company;

public abstract class AbstractFunction {
    public static double precision = 1.0e-5;

    /* formula for absolute value of number */
    public static double Absolute_Value(double value) {
        return (value <= 0.0) ? 0.0 - value : value;
    }

    abstract double f(double x);

    double getRootBisection(double xmin, double xmax) {

        double fmin = f(xmin);
        double fmax = f(xmax);
        if (fmin * fmax > 0) {
            System.out.println("wrong data");
            return 0.0;
        }
        if (fmin == 0)
            return xmin;
        if (fmax == 0)
            return xmax;
        while (Math.abs(xmax - xmin) > precision) {
            double xmid = 0.5 * (xmax + xmin);
            double fmid = f(xmid);

            if (fmin * fmid < 0) {
                xmax = xmid;
                fmax = fmid;
            } else if (fmin * fmid > 0) {
                xmin = xmid;
                fmin = fmid;
            } else
                return xmid;
        }
        return (0.5) * (xmax + xmin);

    }

    public double trapezoidal(float a, float b, float n) {
        double dist = (b - a) / n;

    /* General formula for the area of trapezoids :
    sum=(f(x0)+f(x1))/2*dist +(f(x1)+f(x2))/2*dist+...)
    can be written equivalently:
    sum=(dist/2*)(f(x0) +2*(f(x1)) + 2*(f(x2) +...+f(xn))
     */

        /* the sum of the first two trapezoids*/
        double sum = f(a) + f(b);

        for (int i = 1; i < n; i++)
            sum += 2 * f(a + i * dist);

        return (dist / 2) * sum;


    }

    public double Secant_Method(double x0, double x1) {
        double f2;
        double x2 = 0;


        int step = 1;
        double f0 = f(x0);
        double f1 = f(x1);
        if (f0 * f1 > 0) {
            System.out.println("Wrong data!");
            return 0.0;
        }
        do {
            if (f0 == f1) {
                System.out.println("Error!");
                break;
            }

            x2 = x1 - (x1 - x0) * f1 / (f1 - f0);
            f2 = f(x2);
            System.out.println("Iteration number: " + step + "\tx2= " + x2 + "\tf(x2)= " + f2);

            /* Updates intervals to be checked */
            x0 = x1;
            f0 = f1;
            x1 = x2;
            f1 = f2;

            step++;

        } while (Absolute_Value(f2) > precision);
        System.out.println("Square Root is: " + x2);

        return 0;
    }


}


